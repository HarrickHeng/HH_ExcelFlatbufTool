// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTBuff : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTBuff GetRootAsDTBuff(ByteBuffer _bb) { return GetRootAsDTBuff(_bb, new DTBuff()); }
  public static DTBuff GetRootAsDTBuff(ByteBuffer _bb, DTBuff obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTBuff __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScriptId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsControl { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsGran { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CanDispel { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuffName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBuffNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBuffNameArray() { return __p.__vector_as_array<byte>(14); }
  public int PrefabId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Position { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsAnimation { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepType { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float KeepTime { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string BuffIcon { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(26); }
  public string BuffDesc { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetBuffDescBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetBuffDescArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<HHFramework.DataTable.DTBuff> CreateDTBuff(FlatBufferBuilder builder,
      int Id = 0,
      int ScriptId = 0,
      int IsControl = 0,
      int IsGran = 0,
      int CanDispel = 0,
      StringOffset BuffNameOffset = default(StringOffset),
      int PrefabId = 0,
      int Position = 0,
      int IsAnimation = 0,
      int KeepType = 0,
      float KeepTime = 0.0f,
      StringOffset BuffIconOffset = default(StringOffset),
      StringOffset BuffDescOffset = default(StringOffset)) {
    builder.StartTable(13);
    DTBuff.AddBuffDesc(builder, BuffDescOffset);
    DTBuff.AddBuffIcon(builder, BuffIconOffset);
    DTBuff.AddKeepTime(builder, KeepTime);
    DTBuff.AddKeepType(builder, KeepType);
    DTBuff.AddIsAnimation(builder, IsAnimation);
    DTBuff.AddPosition(builder, Position);
    DTBuff.AddPrefabId(builder, PrefabId);
    DTBuff.AddBuffName(builder, BuffNameOffset);
    DTBuff.AddCanDispel(builder, CanDispel);
    DTBuff.AddIsGran(builder, IsGran);
    DTBuff.AddIsControl(builder, IsControl);
    DTBuff.AddScriptId(builder, ScriptId);
    DTBuff.AddId(builder, Id);
    return DTBuff.EndDTBuff(builder);
  }

  public static void StartDTBuff(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddScriptId(FlatBufferBuilder builder, int ScriptId) { builder.AddInt(1, ScriptId, 0); }
  public static void AddIsControl(FlatBufferBuilder builder, int IsControl) { builder.AddInt(2, IsControl, 0); }
  public static void AddIsGran(FlatBufferBuilder builder, int IsGran) { builder.AddInt(3, IsGran, 0); }
  public static void AddCanDispel(FlatBufferBuilder builder, int CanDispel) { builder.AddInt(4, CanDispel, 0); }
  public static void AddBuffName(FlatBufferBuilder builder, StringOffset BuffNameOffset) { builder.AddOffset(5, BuffNameOffset.Value, 0); }
  public static void AddPrefabId(FlatBufferBuilder builder, int PrefabId) { builder.AddInt(6, PrefabId, 0); }
  public static void AddPosition(FlatBufferBuilder builder, int Position) { builder.AddInt(7, Position, 0); }
  public static void AddIsAnimation(FlatBufferBuilder builder, int IsAnimation) { builder.AddInt(8, IsAnimation, 0); }
  public static void AddKeepType(FlatBufferBuilder builder, int KeepType) { builder.AddInt(9, KeepType, 0); }
  public static void AddKeepTime(FlatBufferBuilder builder, float KeepTime) { builder.AddFloat(10, KeepTime, 0.0f); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset BuffIconOffset) { builder.AddOffset(11, BuffIconOffset.Value, 0); }
  public static void AddBuffDesc(FlatBufferBuilder builder, StringOffset BuffDescOffset) { builder.AddOffset(12, BuffDescOffset.Value, 0); }
  public static Offset<HHFramework.DataTable.DTBuff> EndDTBuff(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTBuff>(o);
  }
}


}
