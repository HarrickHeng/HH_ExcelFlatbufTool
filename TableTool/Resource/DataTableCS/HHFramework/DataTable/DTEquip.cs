// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTEquip : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTEquip GetRootAsDTEquip(ByteBuffer _bb) { return GetRootAsDTEquip(_bb, new DTEquip()); }
  public static DTEquip GetRootAsDTEquip(ByteBuffer _bb, DTEquip obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTEquip __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int UsedLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Star { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Description { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(14); }
  public int Type { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SellMoney { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BackAttrOneType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BackAttrOneValue { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BackAttrTwoType { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BackAttrTwoValue { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Attack { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Defense { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Hit { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Dodge { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cri { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Res { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HP { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MP { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxHole { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EmbedProps { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmbedPropsBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetEmbedPropsBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetEmbedPropsArray() { return __p.__vector_as_array<byte>(46); }
  public int StrengthenItem { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrengthenLvMax { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StrengthenValue { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrengthenValueBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetStrengthenValueBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetStrengthenValueArray() { return __p.__vector_as_array<byte>(52); }
  public string StrengthenItemNumber { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrengthenItemNumberBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetStrengthenItemNumberBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetStrengthenItemNumberArray() { return __p.__vector_as_array<byte>(54); }
  public string StrengthenGold { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrengthenGoldBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetStrengthenGoldBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetStrengthenGoldArray() { return __p.__vector_as_array<byte>(56); }
  public string StrengthenRatio { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrengthenRatioBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetStrengthenRatioBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetStrengthenRatioArray() { return __p.__vector_as_array<byte>(58); }

  public static Offset<HHFramework.DataTable.DTEquip> CreateDTEquip(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int UsedLevel = 0,
      int Quality = 0,
      int Star = 0,
      StringOffset DescriptionOffset = default(StringOffset),
      int Type = 0,
      int SellMoney = 0,
      int BackAttrOneType = 0,
      int BackAttrOneValue = 0,
      int BackAttrTwoType = 0,
      int BackAttrTwoValue = 0,
      int Attack = 0,
      int Defense = 0,
      int Hit = 0,
      int Dodge = 0,
      int Cri = 0,
      int Res = 0,
      int HP = 0,
      int MP = 0,
      int maxHole = 0,
      StringOffset embedPropsOffset = default(StringOffset),
      int StrengthenItem = 0,
      int StrengthenLvMax = 0,
      StringOffset StrengthenValueOffset = default(StringOffset),
      StringOffset StrengthenItemNumberOffset = default(StringOffset),
      StringOffset StrengthenGoldOffset = default(StringOffset),
      StringOffset StrengthenRatioOffset = default(StringOffset)) {
    builder.StartTable(28);
    DTEquip.AddStrengthenRatio(builder, StrengthenRatioOffset);
    DTEquip.AddStrengthenGold(builder, StrengthenGoldOffset);
    DTEquip.AddStrengthenItemNumber(builder, StrengthenItemNumberOffset);
    DTEquip.AddStrengthenValue(builder, StrengthenValueOffset);
    DTEquip.AddStrengthenLvMax(builder, StrengthenLvMax);
    DTEquip.AddStrengthenItem(builder, StrengthenItem);
    DTEquip.AddEmbedProps(builder, embedPropsOffset);
    DTEquip.AddMaxHole(builder, maxHole);
    DTEquip.AddMP(builder, MP);
    DTEquip.AddHP(builder, HP);
    DTEquip.AddRes(builder, Res);
    DTEquip.AddCri(builder, Cri);
    DTEquip.AddDodge(builder, Dodge);
    DTEquip.AddHit(builder, Hit);
    DTEquip.AddDefense(builder, Defense);
    DTEquip.AddAttack(builder, Attack);
    DTEquip.AddBackAttrTwoValue(builder, BackAttrTwoValue);
    DTEquip.AddBackAttrTwoType(builder, BackAttrTwoType);
    DTEquip.AddBackAttrOneValue(builder, BackAttrOneValue);
    DTEquip.AddBackAttrOneType(builder, BackAttrOneType);
    DTEquip.AddSellMoney(builder, SellMoney);
    DTEquip.AddType(builder, Type);
    DTEquip.AddDescription(builder, DescriptionOffset);
    DTEquip.AddStar(builder, Star);
    DTEquip.AddQuality(builder, Quality);
    DTEquip.AddUsedLevel(builder, UsedLevel);
    DTEquip.AddName(builder, NameOffset);
    DTEquip.AddId(builder, Id);
    return DTEquip.EndDTEquip(builder);
  }

  public static void StartDTEquip(FlatBufferBuilder builder) { builder.StartTable(28); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddUsedLevel(FlatBufferBuilder builder, int UsedLevel) { builder.AddInt(2, UsedLevel, 0); }
  public static void AddQuality(FlatBufferBuilder builder, int Quality) { builder.AddInt(3, Quality, 0); }
  public static void AddStar(FlatBufferBuilder builder, int Star) { builder.AddInt(4, Star, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(5, DescriptionOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(6, Type, 0); }
  public static void AddSellMoney(FlatBufferBuilder builder, int SellMoney) { builder.AddInt(7, SellMoney, 0); }
  public static void AddBackAttrOneType(FlatBufferBuilder builder, int BackAttrOneType) { builder.AddInt(8, BackAttrOneType, 0); }
  public static void AddBackAttrOneValue(FlatBufferBuilder builder, int BackAttrOneValue) { builder.AddInt(9, BackAttrOneValue, 0); }
  public static void AddBackAttrTwoType(FlatBufferBuilder builder, int BackAttrTwoType) { builder.AddInt(10, BackAttrTwoType, 0); }
  public static void AddBackAttrTwoValue(FlatBufferBuilder builder, int BackAttrTwoValue) { builder.AddInt(11, BackAttrTwoValue, 0); }
  public static void AddAttack(FlatBufferBuilder builder, int Attack) { builder.AddInt(12, Attack, 0); }
  public static void AddDefense(FlatBufferBuilder builder, int Defense) { builder.AddInt(13, Defense, 0); }
  public static void AddHit(FlatBufferBuilder builder, int Hit) { builder.AddInt(14, Hit, 0); }
  public static void AddDodge(FlatBufferBuilder builder, int Dodge) { builder.AddInt(15, Dodge, 0); }
  public static void AddCri(FlatBufferBuilder builder, int Cri) { builder.AddInt(16, Cri, 0); }
  public static void AddRes(FlatBufferBuilder builder, int Res) { builder.AddInt(17, Res, 0); }
  public static void AddHP(FlatBufferBuilder builder, int HP) { builder.AddInt(18, HP, 0); }
  public static void AddMP(FlatBufferBuilder builder, int MP) { builder.AddInt(19, MP, 0); }
  public static void AddMaxHole(FlatBufferBuilder builder, int maxHole) { builder.AddInt(20, maxHole, 0); }
  public static void AddEmbedProps(FlatBufferBuilder builder, StringOffset embedPropsOffset) { builder.AddOffset(21, embedPropsOffset.Value, 0); }
  public static void AddStrengthenItem(FlatBufferBuilder builder, int StrengthenItem) { builder.AddInt(22, StrengthenItem, 0); }
  public static void AddStrengthenLvMax(FlatBufferBuilder builder, int StrengthenLvMax) { builder.AddInt(23, StrengthenLvMax, 0); }
  public static void AddStrengthenValue(FlatBufferBuilder builder, StringOffset StrengthenValueOffset) { builder.AddOffset(24, StrengthenValueOffset.Value, 0); }
  public static void AddStrengthenItemNumber(FlatBufferBuilder builder, StringOffset StrengthenItemNumberOffset) { builder.AddOffset(25, StrengthenItemNumberOffset.Value, 0); }
  public static void AddStrengthenGold(FlatBufferBuilder builder, StringOffset StrengthenGoldOffset) { builder.AddOffset(26, StrengthenGoldOffset.Value, 0); }
  public static void AddStrengthenRatio(FlatBufferBuilder builder, StringOffset StrengthenRatioOffset) { builder.AddOffset(27, StrengthenRatioOffset.Value, 0); }
  public static Offset<HHFramework.DataTable.DTEquip> EndDTEquip(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTEquip>(o);
  }
}


}
