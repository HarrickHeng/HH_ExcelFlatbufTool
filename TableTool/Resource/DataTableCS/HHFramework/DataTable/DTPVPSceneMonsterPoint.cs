// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTPVPSceneMonsterPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTPVPSceneMonsterPoint GetRootAsDTPVPSceneMonsterPoint(ByteBuffer _bb) { return GetRootAsDTPVPSceneMonsterPoint(_bb, new DTPVPSceneMonsterPoint()); }
  public static DTPVPSceneMonsterPoint GetRootAsDTPVPSceneMonsterPoint(ByteBuffer _bb, DTPVPSceneMonsterPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTPVPSceneMonsterPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public int SceneId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float BornPos(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int BornPosLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetBornPosBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetBornPosBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetBornPosArray() { return __p.__vector_as_array<float>(12); }
  public bool IsFixTime { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int FixTimeHour { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FixTimeMinute { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Interval { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float PatrolX(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PatrolXLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPatrolXBytes() { return __p.__vector_as_span<float>(22, 4); }
#else
  public ArraySegment<byte>? GetPatrolXBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public float[] GetPatrolXArray() { return __p.__vector_as_array<float>(22); }
  public float PatrolY(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PatrolYLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPatrolYBytes() { return __p.__vector_as_span<float>(24, 4); }
#else
  public ArraySegment<byte>? GetPatrolYBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public float[] GetPatrolYArray() { return __p.__vector_as_array<float>(24); }
  public float PatrolZ(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PatrolZLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPatrolZBytes() { return __p.__vector_as_span<float>(26, 4); }
#else
  public ArraySegment<byte>? GetPatrolZBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public float[] GetPatrolZArray() { return __p.__vector_as_array<float>(26); }

  public static Offset<HHFramework.DataTable.DTPVPSceneMonsterPoint> CreateDTPVPSceneMonsterPoint(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset DescOffset = default(StringOffset),
      int SceneId = 0,
      int MonsterId = 0,
      VectorOffset BornPosOffset = default(VectorOffset),
      bool IsFixTime = false,
      int FixTime_Hour = 0,
      int FixTime_Minute = 0,
      int Interval = 0,
      VectorOffset PatrolXOffset = default(VectorOffset),
      VectorOffset PatrolYOffset = default(VectorOffset),
      VectorOffset PatrolZOffset = default(VectorOffset)) {
    builder.StartTable(12);
    DTPVPSceneMonsterPoint.AddPatrolZ(builder, PatrolZOffset);
    DTPVPSceneMonsterPoint.AddPatrolY(builder, PatrolYOffset);
    DTPVPSceneMonsterPoint.AddPatrolX(builder, PatrolXOffset);
    DTPVPSceneMonsterPoint.AddInterval(builder, Interval);
    DTPVPSceneMonsterPoint.AddFixTimeMinute(builder, FixTime_Minute);
    DTPVPSceneMonsterPoint.AddFixTimeHour(builder, FixTime_Hour);
    DTPVPSceneMonsterPoint.AddBornPos(builder, BornPosOffset);
    DTPVPSceneMonsterPoint.AddMonsterId(builder, MonsterId);
    DTPVPSceneMonsterPoint.AddSceneId(builder, SceneId);
    DTPVPSceneMonsterPoint.AddDesc(builder, DescOffset);
    DTPVPSceneMonsterPoint.AddId(builder, Id);
    DTPVPSceneMonsterPoint.AddIsFixTime(builder, IsFixTime);
    return DTPVPSceneMonsterPoint.EndDTPVPSceneMonsterPoint(builder);
  }

  public static void StartDTPVPSceneMonsterPoint(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddSceneId(FlatBufferBuilder builder, int SceneId) { builder.AddInt(2, SceneId, 0); }
  public static void AddMonsterId(FlatBufferBuilder builder, int MonsterId) { builder.AddInt(3, MonsterId, 0); }
  public static void AddBornPos(FlatBufferBuilder builder, VectorOffset BornPosOffset) { builder.AddOffset(4, BornPosOffset.Value, 0); }
  public static VectorOffset CreateBornPosVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBornPosVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBornPosVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBornPosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBornPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsFixTime(FlatBufferBuilder builder, bool IsFixTime) { builder.AddBool(5, IsFixTime, false); }
  public static void AddFixTimeHour(FlatBufferBuilder builder, int FixTimeHour) { builder.AddInt(6, FixTimeHour, 0); }
  public static void AddFixTimeMinute(FlatBufferBuilder builder, int FixTimeMinute) { builder.AddInt(7, FixTimeMinute, 0); }
  public static void AddInterval(FlatBufferBuilder builder, int Interval) { builder.AddInt(8, Interval, 0); }
  public static void AddPatrolX(FlatBufferBuilder builder, VectorOffset PatrolXOffset) { builder.AddOffset(9, PatrolXOffset.Value, 0); }
  public static VectorOffset CreatePatrolXVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePatrolXVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePatrolXVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePatrolXVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPatrolXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPatrolY(FlatBufferBuilder builder, VectorOffset PatrolYOffset) { builder.AddOffset(10, PatrolYOffset.Value, 0); }
  public static VectorOffset CreatePatrolYVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePatrolYVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePatrolYVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePatrolYVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPatrolYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPatrolZ(FlatBufferBuilder builder, VectorOffset PatrolZOffset) { builder.AddOffset(11, PatrolZOffset.Value, 0); }
  public static VectorOffset CreatePatrolZVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePatrolZVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePatrolZVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePatrolZVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPatrolZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<HHFramework.DataTable.DTPVPSceneMonsterPoint> EndDTPVPSceneMonsterPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTPVPSceneMonsterPoint>(o);
  }
}


}
