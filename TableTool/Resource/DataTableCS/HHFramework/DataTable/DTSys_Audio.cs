// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTSys_Audio : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTSys_Audio GetRootAsDTSys_Audio(ByteBuffer _bb) { return GetRootAsDTSys_Audio(_bb, new DTSys_Audio()); }
  public static DTSys_Audio GetRootAsDTSys_Audio(ByteBuffer _bb, DTSys_Audio obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTSys_Audio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public string AssetPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAssetPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAssetPathArray() { return __p.__vector_as_array<byte>(8); }
  public int Is3D { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Volume { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<HHFramework.DataTable.DTSys_Audio> CreateDTSys_Audio(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset DescOffset = default(StringOffset),
      StringOffset AssetPathOffset = default(StringOffset),
      int Is3D = 0,
      float Volume = 0.0f) {
    builder.StartTable(5);
    DTSys_Audio.AddVolume(builder, Volume);
    DTSys_Audio.AddIs3D(builder, Is3D);
    DTSys_Audio.AddAssetPath(builder, AssetPathOffset);
    DTSys_Audio.AddDesc(builder, DescOffset);
    DTSys_Audio.AddId(builder, Id);
    return DTSys_Audio.EndDTSys_Audio(builder);
  }

  public static void StartDTSys_Audio(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddAssetPath(FlatBufferBuilder builder, StringOffset AssetPathOffset) { builder.AddOffset(2, AssetPathOffset.Value, 0); }
  public static void AddIs3D(FlatBufferBuilder builder, int Is3D) { builder.AddInt(3, Is3D, 0); }
  public static void AddVolume(FlatBufferBuilder builder, float Volume) { builder.AddFloat(4, Volume, 0.0f); }
  public static Offset<HHFramework.DataTable.DTSys_Audio> EndDTSys_Audio(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTSys_Audio>(o);
  }
}


}
