// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTSprite : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTSprite GetRootAsDTSprite(ByteBuffer _bb) { return GetRootAsDTSprite(_bb, new DTSprite()); }
  public static DTSprite GetRootAsDTSprite(ByteBuffer _bb, DTSprite obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTSprite __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpriteType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsBoss { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PrefabId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AnimGroupId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HP { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MP { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Atk { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Def { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalRate { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalResRate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalStrengthRate { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlockRate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlockResRate { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlockStrengthRate { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InjureRate { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InjureResRate { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EXSkillInjureRate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EXSkillInjureResRate { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IgnoreDefRate { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Skill1 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<HHFramework.DataTable.DTSprite> CreateDTSprite(FlatBufferBuilder builder,
      int Id = 0,
      int SpriteType = 0,
      StringOffset NameOffset = default(StringOffset),
      int Level = 0,
      int IsBoss = 0,
      int PrefabId = 0,
      int AnimGroupId = 0,
      int HP = 0,
      int MP = 0,
      int atk = 0,
      int def = 0,
      int criticalRate = 0,
      int criticalResRate = 0,
      int criticalStrengthRate = 0,
      int blockRate = 0,
      int blockResRate = 0,
      int blockStrengthRate = 0,
      int injureRate = 0,
      int injureResRate = 0,
      int eXSkillInjureRate = 0,
      int eXSkillInjureResRate = 0,
      int IgnoreDefRate = 0,
      int Skill1 = 0) {
    builder.StartTable(23);
    DTSprite.AddSkill1(builder, Skill1);
    DTSprite.AddIgnoreDefRate(builder, IgnoreDefRate);
    DTSprite.AddEXSkillInjureResRate(builder, eXSkillInjureResRate);
    DTSprite.AddEXSkillInjureRate(builder, eXSkillInjureRate);
    DTSprite.AddInjureResRate(builder, injureResRate);
    DTSprite.AddInjureRate(builder, injureRate);
    DTSprite.AddBlockStrengthRate(builder, blockStrengthRate);
    DTSprite.AddBlockResRate(builder, blockResRate);
    DTSprite.AddBlockRate(builder, blockRate);
    DTSprite.AddCriticalStrengthRate(builder, criticalStrengthRate);
    DTSprite.AddCriticalResRate(builder, criticalResRate);
    DTSprite.AddCriticalRate(builder, criticalRate);
    DTSprite.AddDef(builder, def);
    DTSprite.AddAtk(builder, atk);
    DTSprite.AddMP(builder, MP);
    DTSprite.AddHP(builder, HP);
    DTSprite.AddAnimGroupId(builder, AnimGroupId);
    DTSprite.AddPrefabId(builder, PrefabId);
    DTSprite.AddIsBoss(builder, IsBoss);
    DTSprite.AddLevel(builder, Level);
    DTSprite.AddName(builder, NameOffset);
    DTSprite.AddSpriteType(builder, SpriteType);
    DTSprite.AddId(builder, Id);
    return DTSprite.EndDTSprite(builder);
  }

  public static void StartDTSprite(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddSpriteType(FlatBufferBuilder builder, int SpriteType) { builder.AddInt(1, SpriteType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(2, NameOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(3, Level, 0); }
  public static void AddIsBoss(FlatBufferBuilder builder, int IsBoss) { builder.AddInt(4, IsBoss, 0); }
  public static void AddPrefabId(FlatBufferBuilder builder, int PrefabId) { builder.AddInt(5, PrefabId, 0); }
  public static void AddAnimGroupId(FlatBufferBuilder builder, int AnimGroupId) { builder.AddInt(6, AnimGroupId, 0); }
  public static void AddHP(FlatBufferBuilder builder, int HP) { builder.AddInt(7, HP, 0); }
  public static void AddMP(FlatBufferBuilder builder, int MP) { builder.AddInt(8, MP, 0); }
  public static void AddAtk(FlatBufferBuilder builder, int atk) { builder.AddInt(9, atk, 0); }
  public static void AddDef(FlatBufferBuilder builder, int def) { builder.AddInt(10, def, 0); }
  public static void AddCriticalRate(FlatBufferBuilder builder, int criticalRate) { builder.AddInt(11, criticalRate, 0); }
  public static void AddCriticalResRate(FlatBufferBuilder builder, int criticalResRate) { builder.AddInt(12, criticalResRate, 0); }
  public static void AddCriticalStrengthRate(FlatBufferBuilder builder, int criticalStrengthRate) { builder.AddInt(13, criticalStrengthRate, 0); }
  public static void AddBlockRate(FlatBufferBuilder builder, int blockRate) { builder.AddInt(14, blockRate, 0); }
  public static void AddBlockResRate(FlatBufferBuilder builder, int blockResRate) { builder.AddInt(15, blockResRate, 0); }
  public static void AddBlockStrengthRate(FlatBufferBuilder builder, int blockStrengthRate) { builder.AddInt(16, blockStrengthRate, 0); }
  public static void AddInjureRate(FlatBufferBuilder builder, int injureRate) { builder.AddInt(17, injureRate, 0); }
  public static void AddInjureResRate(FlatBufferBuilder builder, int injureResRate) { builder.AddInt(18, injureResRate, 0); }
  public static void AddEXSkillInjureRate(FlatBufferBuilder builder, int eXSkillInjureRate) { builder.AddInt(19, eXSkillInjureRate, 0); }
  public static void AddEXSkillInjureResRate(FlatBufferBuilder builder, int eXSkillInjureResRate) { builder.AddInt(20, eXSkillInjureResRate, 0); }
  public static void AddIgnoreDefRate(FlatBufferBuilder builder, int IgnoreDefRate) { builder.AddInt(21, IgnoreDefRate, 0); }
  public static void AddSkill1(FlatBufferBuilder builder, int Skill1) { builder.AddInt(22, Skill1, 0); }
  public static Offset<HHFramework.DataTable.DTSprite> EndDTSprite(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTSprite>(o);
  }
}


}
