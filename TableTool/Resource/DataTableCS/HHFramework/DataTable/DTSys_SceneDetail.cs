// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTSys_SceneDetail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTSys_SceneDetail GetRootAsDTSys_SceneDetail(ByteBuffer _bb) { return GetRootAsDTSys_SceneDetail(_bb, new DTSys_SceneDetail()); }
  public static DTSys_SceneDetail GetRootAsDTSys_SceneDetail(ByteBuffer _bb, DTSys_SceneDetail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTSys_SceneDetail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SceneId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SceneName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSceneNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSceneNameArray() { return __p.__vector_as_array<byte>(8); }
  public string ScenePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetScenePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetScenePathArray() { return __p.__vector_as_array<byte>(10); }
  public int SceneGrade { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<HHFramework.DataTable.DTSys_SceneDetail> CreateDTSys_SceneDetail(FlatBufferBuilder builder,
      int Id = 0,
      int SceneId = 0,
      StringOffset SceneNameOffset = default(StringOffset),
      StringOffset ScenePathOffset = default(StringOffset),
      int SceneGrade = 0) {
    builder.StartTable(5);
    DTSys_SceneDetail.AddSceneGrade(builder, SceneGrade);
    DTSys_SceneDetail.AddScenePath(builder, ScenePathOffset);
    DTSys_SceneDetail.AddSceneName(builder, SceneNameOffset);
    DTSys_SceneDetail.AddSceneId(builder, SceneId);
    DTSys_SceneDetail.AddId(builder, Id);
    return DTSys_SceneDetail.EndDTSys_SceneDetail(builder);
  }

  public static void StartDTSys_SceneDetail(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddSceneId(FlatBufferBuilder builder, int SceneId) { builder.AddInt(1, SceneId, 0); }
  public static void AddSceneName(FlatBufferBuilder builder, StringOffset SceneNameOffset) { builder.AddOffset(2, SceneNameOffset.Value, 0); }
  public static void AddScenePath(FlatBufferBuilder builder, StringOffset ScenePathOffset) { builder.AddOffset(3, ScenePathOffset.Value, 0); }
  public static void AddSceneGrade(FlatBufferBuilder builder, int SceneGrade) { builder.AddInt(4, SceneGrade, 0); }
  public static Offset<HHFramework.DataTable.DTSys_SceneDetail> EndDTSys_SceneDetail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTSys_SceneDetail>(o);
  }
}


}
