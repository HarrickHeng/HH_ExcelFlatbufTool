// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Chapter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static Chapter GetRootAsChapter(ByteBuffer _bb) { return GetRootAsChapter(_bb, new Chapter()); }
  public static Chapter GetRootAsChapter(ByteBuffer _bb, Chapter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Chapter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ChapterName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChapterNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetChapterNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetChapterNameArray() { return __p.__vector_as_array<byte>(6); }
  public int GameLevelCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BigPic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigPicBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBigPicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBigPicArray() { return __p.__vector_as_array<byte>(10); }
  public float Uvx { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Uvy { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<HHFramework.DataTable.Chapter> CreateChapter(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset ChapterNameOffset = default(StringOffset),
      int GameLevelCount = 0,
      StringOffset Big_PicOffset = default(StringOffset),
      float Uvx = 0.0f,
      float Uvy = 0.0f) {
    builder.StartTable(6);
    Chapter.AddUvy(builder, Uvy);
    Chapter.AddUvx(builder, Uvx);
    Chapter.AddBigPic(builder, Big_PicOffset);
    Chapter.AddGameLevelCount(builder, GameLevelCount);
    Chapter.AddChapterName(builder, ChapterNameOffset);
    Chapter.AddId(builder, Id);
    return Chapter.EndChapter(builder);
  }

  public static void StartChapter(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddChapterName(FlatBufferBuilder builder, StringOffset ChapterNameOffset) { builder.AddOffset(1, ChapterNameOffset.Value, 0); }
  public static void AddGameLevelCount(FlatBufferBuilder builder, int GameLevelCount) { builder.AddInt(2, GameLevelCount, 0); }
  public static void AddBigPic(FlatBufferBuilder builder, StringOffset BigPicOffset) { builder.AddOffset(3, BigPicOffset.Value, 0); }
  public static void AddUvx(FlatBufferBuilder builder, float Uvx) { builder.AddFloat(4, Uvx, 0.0f); }
  public static void AddUvy(FlatBufferBuilder builder, float Uvy) { builder.AddFloat(5, Uvy, 0.0f); }
  public static Offset<HHFramework.DataTable.Chapter> EndChapter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.Chapter>(o);
  }
}


}
