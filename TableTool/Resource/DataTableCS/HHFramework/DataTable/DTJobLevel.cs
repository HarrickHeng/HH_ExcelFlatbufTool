// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTJobLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTJobLevel GetRootAsDTJobLevel(ByteBuffer _bb) { return GetRootAsDTJobLevel(_bb, new DTJobLevel()); }
  public static DTJobLevel GetRootAsDTJobLevel(ByteBuffer _bb, DTJobLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTJobLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int JobId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedExp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Energy { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HP { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MP { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Atk { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Def { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalResRate { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalStrengthRate { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlockRate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlockResRate { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlockStrengthRate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InjureRate { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InjureResRate { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EXSkillInjureRate { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EXSkillInjureResRate { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IgnoreDefRate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<HHFramework.DataTable.DTJobLevel> CreateDTJobLevel(FlatBufferBuilder builder,
      int Id = 0,
      int JobId = 0,
      int Level = 0,
      int NeedExp = 0,
      int Energy = 0,
      int HP = 0,
      int MP = 0,
      int atk = 0,
      int def = 0,
      int criticalRate = 0,
      int criticalResRate = 0,
      int criticalStrengthRate = 0,
      int blockRate = 0,
      int blockResRate = 0,
      int blockStrengthRate = 0,
      int injureRate = 0,
      int injureResRate = 0,
      int eXSkillInjureRate = 0,
      int eXSkillInjureResRate = 0,
      int IgnoreDefRate = 0) {
    builder.StartTable(20);
    DTJobLevel.AddIgnoreDefRate(builder, IgnoreDefRate);
    DTJobLevel.AddEXSkillInjureResRate(builder, eXSkillInjureResRate);
    DTJobLevel.AddEXSkillInjureRate(builder, eXSkillInjureRate);
    DTJobLevel.AddInjureResRate(builder, injureResRate);
    DTJobLevel.AddInjureRate(builder, injureRate);
    DTJobLevel.AddBlockStrengthRate(builder, blockStrengthRate);
    DTJobLevel.AddBlockResRate(builder, blockResRate);
    DTJobLevel.AddBlockRate(builder, blockRate);
    DTJobLevel.AddCriticalStrengthRate(builder, criticalStrengthRate);
    DTJobLevel.AddCriticalResRate(builder, criticalResRate);
    DTJobLevel.AddCriticalRate(builder, criticalRate);
    DTJobLevel.AddDef(builder, def);
    DTJobLevel.AddAtk(builder, atk);
    DTJobLevel.AddMP(builder, MP);
    DTJobLevel.AddHP(builder, HP);
    DTJobLevel.AddEnergy(builder, Energy);
    DTJobLevel.AddNeedExp(builder, NeedExp);
    DTJobLevel.AddLevel(builder, Level);
    DTJobLevel.AddJobId(builder, JobId);
    DTJobLevel.AddId(builder, Id);
    return DTJobLevel.EndDTJobLevel(builder);
  }

  public static void StartDTJobLevel(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddJobId(FlatBufferBuilder builder, int JobId) { builder.AddInt(1, JobId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddNeedExp(FlatBufferBuilder builder, int NeedExp) { builder.AddInt(3, NeedExp, 0); }
  public static void AddEnergy(FlatBufferBuilder builder, int Energy) { builder.AddInt(4, Energy, 0); }
  public static void AddHP(FlatBufferBuilder builder, int HP) { builder.AddInt(5, HP, 0); }
  public static void AddMP(FlatBufferBuilder builder, int MP) { builder.AddInt(6, MP, 0); }
  public static void AddAtk(FlatBufferBuilder builder, int atk) { builder.AddInt(7, atk, 0); }
  public static void AddDef(FlatBufferBuilder builder, int def) { builder.AddInt(8, def, 0); }
  public static void AddCriticalRate(FlatBufferBuilder builder, int criticalRate) { builder.AddInt(9, criticalRate, 0); }
  public static void AddCriticalResRate(FlatBufferBuilder builder, int criticalResRate) { builder.AddInt(10, criticalResRate, 0); }
  public static void AddCriticalStrengthRate(FlatBufferBuilder builder, int criticalStrengthRate) { builder.AddInt(11, criticalStrengthRate, 0); }
  public static void AddBlockRate(FlatBufferBuilder builder, int blockRate) { builder.AddInt(12, blockRate, 0); }
  public static void AddBlockResRate(FlatBufferBuilder builder, int blockResRate) { builder.AddInt(13, blockResRate, 0); }
  public static void AddBlockStrengthRate(FlatBufferBuilder builder, int blockStrengthRate) { builder.AddInt(14, blockStrengthRate, 0); }
  public static void AddInjureRate(FlatBufferBuilder builder, int injureRate) { builder.AddInt(15, injureRate, 0); }
  public static void AddInjureResRate(FlatBufferBuilder builder, int injureResRate) { builder.AddInt(16, injureResRate, 0); }
  public static void AddEXSkillInjureRate(FlatBufferBuilder builder, int eXSkillInjureRate) { builder.AddInt(17, eXSkillInjureRate, 0); }
  public static void AddEXSkillInjureResRate(FlatBufferBuilder builder, int eXSkillInjureResRate) { builder.AddInt(18, eXSkillInjureResRate, 0); }
  public static void AddIgnoreDefRate(FlatBufferBuilder builder, int IgnoreDefRate) { builder.AddInt(19, IgnoreDefRate, 0); }
  public static Offset<HHFramework.DataTable.DTJobLevel> EndDTJobLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTJobLevel>(o);
  }
}


}
