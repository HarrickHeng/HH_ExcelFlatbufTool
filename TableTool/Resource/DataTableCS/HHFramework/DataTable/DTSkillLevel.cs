// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTSkillLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTSkillLevel GetRootAsDTSkillLevel(ByteBuffer _bb) { return GetRootAsDTSkillLevel(_bb, new DTSkillLevel()); }
  public static DTSkillLevel GetRootAsDTSkillLevel(ByteBuffer _bb, DTSkillLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTSkillLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PrefabId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpendMP { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SkillCDTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AttackRange { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int ScriptId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Args(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArgsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArgsBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetArgsBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetArgsArray() { return __p.__vector_as_array<int>(20); }
  public string Desc { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(22); }
  public int NeedCharacterLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpendGold { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<HHFramework.DataTable.DTSkillLevel> CreateDTSkillLevel(FlatBufferBuilder builder,
      int Id = 0,
      int SkillId = 0,
      int Level = 0,
      int PrefabId = 0,
      int SpendMP = 0,
      float SkillCDTime = 0.0f,
      float AttackRange = 0.0f,
      int ScriptId = 0,
      VectorOffset ArgsOffset = default(VectorOffset),
      StringOffset DescOffset = default(StringOffset),
      int NeedCharacterLevel = 0,
      int SpendGold = 0) {
    builder.StartTable(12);
    DTSkillLevel.AddSpendGold(builder, SpendGold);
    DTSkillLevel.AddNeedCharacterLevel(builder, NeedCharacterLevel);
    DTSkillLevel.AddDesc(builder, DescOffset);
    DTSkillLevel.AddArgs(builder, ArgsOffset);
    DTSkillLevel.AddScriptId(builder, ScriptId);
    DTSkillLevel.AddAttackRange(builder, AttackRange);
    DTSkillLevel.AddSkillCDTime(builder, SkillCDTime);
    DTSkillLevel.AddSpendMP(builder, SpendMP);
    DTSkillLevel.AddPrefabId(builder, PrefabId);
    DTSkillLevel.AddLevel(builder, Level);
    DTSkillLevel.AddSkillId(builder, SkillId);
    DTSkillLevel.AddId(builder, Id);
    return DTSkillLevel.EndDTSkillLevel(builder);
  }

  public static void StartDTSkillLevel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, int SkillId) { builder.AddInt(1, SkillId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddPrefabId(FlatBufferBuilder builder, int PrefabId) { builder.AddInt(3, PrefabId, 0); }
  public static void AddSpendMP(FlatBufferBuilder builder, int SpendMP) { builder.AddInt(4, SpendMP, 0); }
  public static void AddSkillCDTime(FlatBufferBuilder builder, float SkillCDTime) { builder.AddFloat(5, SkillCDTime, 0.0f); }
  public static void AddAttackRange(FlatBufferBuilder builder, float AttackRange) { builder.AddFloat(6, AttackRange, 0.0f); }
  public static void AddScriptId(FlatBufferBuilder builder, int ScriptId) { builder.AddInt(7, ScriptId, 0); }
  public static void AddArgs(FlatBufferBuilder builder, VectorOffset ArgsOffset) { builder.AddOffset(8, ArgsOffset.Value, 0); }
  public static VectorOffset CreateArgsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(9, DescOffset.Value, 0); }
  public static void AddNeedCharacterLevel(FlatBufferBuilder builder, int NeedCharacterLevel) { builder.AddInt(10, NeedCharacterLevel, 0); }
  public static void AddSpendGold(FlatBufferBuilder builder, int SpendGold) { builder.AddInt(11, SpendGold, 0); }
  public static Offset<HHFramework.DataTable.DTSkillLevel> EndDTSkillLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTSkillLevel>(o);
  }
}


}
