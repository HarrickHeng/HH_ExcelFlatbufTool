// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HHFramework.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTSys_Prefab : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
  public static DTSys_Prefab GetRootAsDTSys_Prefab(ByteBuffer _bb) { return GetRootAsDTSys_Prefab(_bb, new DTSys_Prefab()); }
  public static DTSys_Prefab GetRootAsDTSys_Prefab(ByteBuffer _bb, DTSys_Prefab obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTSys_Prefab __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string AssetPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAssetPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAssetPathArray() { return __p.__vector_as_array<byte>(10); }
  public byte PoolId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte CullDespawned { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public int CullAbove { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CullDelay { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CullMaxPerPass { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<HHFramework.DataTable.DTSys_Prefab> CreateDTSys_Prefab(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset DescOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      StringOffset AssetPathOffset = default(StringOffset),
      byte PoolId = 0,
      byte CullDespawned = 0,
      int CullAbove = 0,
      int CullDelay = 0,
      int CullMaxPerPass = 0) {
    builder.StartTable(9);
    DTSys_Prefab.AddCullMaxPerPass(builder, CullMaxPerPass);
    DTSys_Prefab.AddCullDelay(builder, CullDelay);
    DTSys_Prefab.AddCullAbove(builder, CullAbove);
    DTSys_Prefab.AddAssetPath(builder, AssetPathOffset);
    DTSys_Prefab.AddName(builder, NameOffset);
    DTSys_Prefab.AddDesc(builder, DescOffset);
    DTSys_Prefab.AddId(builder, Id);
    DTSys_Prefab.AddCullDespawned(builder, CullDespawned);
    DTSys_Prefab.AddPoolId(builder, PoolId);
    return DTSys_Prefab.EndDTSys_Prefab(builder);
  }

  public static void StartDTSys_Prefab(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(2, NameOffset.Value, 0); }
  public static void AddAssetPath(FlatBufferBuilder builder, StringOffset AssetPathOffset) { builder.AddOffset(3, AssetPathOffset.Value, 0); }
  public static void AddPoolId(FlatBufferBuilder builder, byte PoolId) { builder.AddByte(4, PoolId, 0); }
  public static void AddCullDespawned(FlatBufferBuilder builder, byte CullDespawned) { builder.AddByte(5, CullDespawned, 0); }
  public static void AddCullAbove(FlatBufferBuilder builder, int CullAbove) { builder.AddInt(6, CullAbove, 0); }
  public static void AddCullDelay(FlatBufferBuilder builder, int CullDelay) { builder.AddInt(7, CullDelay, 0); }
  public static void AddCullMaxPerPass(FlatBufferBuilder builder, int CullMaxPerPass) { builder.AddInt(8, CullMaxPerPass, 0); }
  public static Offset<HHFramework.DataTable.DTSys_Prefab> EndDTSys_Prefab(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HHFramework.DataTable.DTSys_Prefab>(o);
  }
}


}
